AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  TRC Serverless Template

Globals:
  Function:
    Timeout: 15

Parameters:
  ENVIRONMENT:
    Description: "Required. Enviroment that will be deployed in"
    Type: "String"
  CloudFrontPriceClass:
    Type: String
    Description: "The price class for CloudFront distribution."
    Default: "PriceClass_100"
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  AcmCertificateArn:
    Type: String
    Description: "The certificate arn for the domain name provided"
  DomainName:
    Type: String
    Description: "domain name of the website"

Resources:
  FullDynamoDBAccessRoll:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Retain
    Properties:
      DistributionConfig:
        # Making the origin of this distribution to the S3 bucket of the person pushing
        Origins:
          - Id: S3Origin
            DomainName: !Sub "${DomainName}.s3.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        Aliases:
          - !Ref DomainName
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Sub "${AcmCertificateArn}"
          MinimumProtocolVersion: 'TLSv1.2_2019'
          SslSupportMethod: 'sni-only'
        # Redirecting 404 errors to index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - POST
          TargetOriginId: bucketOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https

  EventAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "EventAPI_${ENVIRONMENT}"
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  UserTransactionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "UserTransactionAPI_${ENVIRONMENT}"
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  EventsGet:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FullDynamoDBAccessRoll
      FunctionName: !Sub "EventsGet_${ENVIRONMENT}"
      CodeUri: lambdas/events/get
      Handler: getEvents.getEvents
      Runtime: python3.8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "Events_${ENVIRONMENT}"
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        GetEvents:
          Type: Api
          Properties:
            RestApiId: !Ref EventAPI
            Path: /api/events
            Method: GET
            RequestParameters:
              - method.request.querystring.EventType:
                  Required: false
                  Caching: false

  TransactionsPost:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt FullDynamoDBAccessRoll
      FunctionName: !Sub "TransactionsPost_${ENVIRONMENT}"
      CodeUri: lambdas/transactions/post
      Handler: postTransactions.postTransactions
      Runtime: python3.8
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "User_Transactions_${ENVIRONMENT}"
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        PostTransaction:
          Type: Api
          Properties:
            RestApiId: !Ref UserTransactionAPI
            Path: /api/UserTransactions
            Method: POST

  EventsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Events_${ENVIRONMENT}"
      AttributeDefinitions:
        - AttributeName: EventID
          AttributeType: S
      KeySchema:
        - AttributeName: EventID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST

  TransactionsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "User_Transactions_${ENVIRONMENT}"
      AttributeDefinitions:
        - AttributeName: TransactionID
          AttributeType: S
      KeySchema:
        - AttributeName: TransactionID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST
