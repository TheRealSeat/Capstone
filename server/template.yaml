AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  TRC Serverless Template

Globals:
  Function:
    Timeout: 15

Parameters:
  ENVIRONMENT:
    Description: "Required. Enviroment that will be deployed in"
    Type: "String"
  # ACMCERTIFICATEARN:
  #   Type: String
  #   Description: "The certificate arn for the domain name provided"
  DOMAINNAME:
    Type: String
    Description: "domain name of the website"

Resources:
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Retain
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !Sub "${DOMAINNAME}.s3.amazonaws.com"
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        - Id: EventAPI
          DomainName: !Sub "${EventAPI}.execute-api.us-east-1.amazonaws.com"
          OriginPath: /Prod
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginSSLProtocols: 
            - 'TLSv1.2'
        - Id: UserTransactionAPI
          DomainName: !Sub "${UserTransactionAPI}.execute-api.us-east-1.amazonaws.com"
          OriginPath: /Prod
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginSSLProtocols: 
            - 'TLSv1.2'
        - Id: PaymentIntentAPI
          DomainName: !Sub "${PaymentIntentAPI}.execute-api.us-east-1.amazonaws.com"
          OriginPath: /Prod
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginSSLProtocols: 
            - 'TLSv1.2'
        Enabled: 'true'
        Aliases:
        - !Sub "${DOMAINNAME}"
        HttpVersion: http2
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:415756122454:certificate/e1ae857b-b154-4df7-a805-059ed4dd78b3"
          MinimumProtocolVersion: 'TLSv1.2_2019'
          SslSupportMethod: 'sni-only'
        # Redirecting 404 errors to index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'    
        DefaultCacheBehavior:
          Compress: 'false'
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
        - PathPattern: '/api/events'
          TargetOriginId: EventAPI
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: 'false'
          ForwardedValues:
            QueryString: 'true'
        - PathPattern: '/api/UserTransactions'
          TargetOriginId: UserTransactionAPI
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: 'false'
          ForwardedValues:
            QueryString: 'true'
        - PathPattern: '/api/PaymentIntent'
          TargetOriginId: PaymentIntentAPI
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: 'false'
          ForwardedValues:
            QueryString: 'false'
        - PathPattern: '*'
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          Compress: 'false'
          ForwardedValues:
            QueryString: 'false'
          


  EventAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "EventAPI_${ENVIRONMENT}"
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  UserTransactionAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "UserTransactionAPI_${ENVIRONMENT}"
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  PaymentIntentAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "PaymentIntentAPI_${ENVIRONMENT}"
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  EventsGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "EventsGet_${ENVIRONMENT}"
      CodeUri: lambdas/events/get
      Handler: getEvents.getEvents
      Runtime: python3.8
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBReadPolicy:
            TableName: !Sub "Events_${ENVIRONMENT}"
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        GetEvents:
          Type: Api
          Properties:
            RestApiId: !Ref EventAPI
            Path: /api/events
            Method: GET
            RequestParameters:
              - method.request.querystring.EventType:
                  Required: false
                  Caching: false

  EventsPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "EventsPost_${ENVIRONMENT}"
      CodeUri: lambdas/events/post
      Handler: postEvents.postEvents
      Runtime: python3.8
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "Events_${ENVIRONMENT}"
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        PostEvents:
          Type: Api
          Properties:
            RestApiId: !Ref EventAPI
            Path: /api/events
            Method: POST

  TransactionsPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "TransactionsPost_${ENVIRONMENT}"
      CodeUri: lambdas/transactions/post
      Handler: postTransactions.postTransactions
      Runtime: python3.8
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBWritePolicy:
            TableName: !Sub "User_Transactions_${ENVIRONMENT}"
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        PostTransaction:
          Type: Api
          Properties:
            RestApiId: !Ref UserTransactionAPI
            Path: /api/UserTransactions
            Method: POST

  PaymentIntentPost:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "PaymentIntentPost_${ENVIRONMENT}"
      CodeUri: lambdas/stripe/paymentIntent/post
      Handler: postPaymentIntent.postPaymentIntent
      Runtime: python3.8
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${ENVIRONMENT}"
      Events:
        PostPaymentIntent:
          Type: Api
          Properties:
            RestApiId: !Ref PaymentIntentAPI
            Path: /api/PaymentIntent
            Method: POST
  

  EventsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Events_${ENVIRONMENT}"
      AttributeDefinitions:
        - AttributeName: EventID
          AttributeType: S
      KeySchema:
        - AttributeName: EventID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST

  TransactionsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "User_Transactions_${ENVIRONMENT}"
      AttributeDefinitions:
        - AttributeName: TransactionID
          AttributeType: S
      KeySchema:
        - AttributeName: TransactionID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      BillingMode: PAY_PER_REQUEST
